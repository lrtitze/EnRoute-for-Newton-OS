//========= DEBUG DUMP FUNCTIONS ==================DefConst ( 'k_NumAsHexFunc, func ( num, size )	begin	local str, neg;	if num < 0 then		begin		neg := $-;		num := -num;		size := size - 1;		end;	repeat 		str := "0123456789ABCDEF"[band(num, 0x0F)] & str;		num := num >> 4;		size := size - 1;		until num = 0 and size <= 0;	neg & str	end );DefConst ( 'k_UNumAsHexFunc, func ( num, reqSize )	begin	local size := reqSize;	local str;	repeat 		str := "0123456789ABCDEF"[band(num, 0x0F)] & str;		num := num >> 4;		if num < 0 then num := Band ( num, 0x03FFFFFF );		size := size - 1;		until num = 0 and size <= 0;	while StrLen(str) < reqSize do str := "0" & str;	str;	end );DefConst ( 'k_LongSpaces, "                                                  " );DefConst ( 'k_DumpHexObjFunc, func native ( binData )	begin	local srcBin := Clone ( binData );	SetClass ( srcBin, 'binary );	local hexDumpFunc  := GetGlobalFn('StrHexDump);	local extBytesFunc := GetGlobalFn('ExtractBytes);	local xBytFunc     := GetGlobalFn('ExtractByte);	local int binLen := Length ( srcBin );	local int i := 0;	local sOut := GetDefaultStore():NewVBO ( 'string, 2 );	StrMunger ( sOut, 0, nil, "HexDump:\n", 0, nil );	while i < binLen do		begin		// for each output line		local s4 := call k_UNumAsHexFunc with (i,4);		while StrLen(s4) < 4 do s4 := $0 & s4;		s4 := s4 & ": " ;		local j := i;		while j < i + 16 and j < binlen do			begin			local dumpLen := binLen - j;			if dumpLen > 4 then dumpLen := 4;			local blk := call extBytesFunc with ( binData, j, dumpLen, 'binary );			s4  := s4 && call hexDumpFunc with ( blk, 1 );			j := j + 4;			end;		s4 := s4 & k_LongSpaces;		s4 := SubStr ( s4, 0, 59 ) & "¥  ";		if j > binlen then j := binlen;		local int x;		for x := i to (j - 1) do			begin			local c := call xBytFunc with ( bindata, x );			if c < 32 or c > 127 then				c := ".";			else				c := Chr(c);			s4 := s4 & c;			end;		s4 := s4 & k_LongSpaces;		s4 := SubStr ( s4, 0, 80 ) & "¥" & unicodeCR;		StrMunger ( sOut, StrLen(sOut), nil, s4, 0, StrLen(s4) );		i := j;		end;	sOut;	end );
constant k_Service_Core   := true;constant k_DebugPartFrame := nil;constant k_DebugInstall   := nil;OpenResFile( Home & "resources"); 	DefConst ( 'kFontTagIcon, GetPICTAsBits ( "Font TagIcon", nil ) );	DefConst ( 'kEnRouteIcon, GetPICTAsBits ( "EnRoute icon", nil ) );CloseResFile();DefConst ( 'k_RouteBinaryVDef,	{	_proto:		protoStaticText,//	viewFont:	1058816,	viewBounds:	SetBounds ( 10, 20, -10, 0 ),	viewJustify: 240,	// 242,//	text:		nil,	symbol:		kRouteBinarySym,	version:	1,	type:		'viewer,	styles:		[ 24, 5253120, 96000, 1058816 ],	tabs:		[ 62 ],	name:		LocObj ( "Binary Enclosure", 'routeBinaryVDef.vDefName ),	SetupForm: func ( entry, entryView )		begin		local twoCRs := "\n\n";		local qCR := "\"\n";		local s :=			LocObj ( "EnRoute Binary Enclosure", 'routeBinaryVDef.heading )			& "\n\n";		if entry.data then s := s &			ParamStr ( LocObj ( "Size:\t^0 bytes", 'routeBinaryVDef.dataSize ), [ Length(entry.data) ] )			& unicodeCR;		if entry.fName then s := s			& LocObj ( "Filename:", 'routeBinaryVDef.fileNameLabel )			& "\t\"" & entry.fName & qCR;		if entry.fType then s := s			& LocObj ( "Type:", 'routeBinaryVDef.fileTypeLabel )			& "\t\"" & entry.fType & qCR;		if entry.fCreator then s := s			& LocObj ( "Creator:", 'routeBinaryVDef.creatorLabel )			& "\t\"" & entry.fCreator & qCR;		text := s;		end,	} );DefConst ( 'k_RouteMIMEVDef,	{	_proto:		k_RouteBinaryVDef,	symbol:		'enRouteMIME,	name:		LocObj ( "MIME Enclosure", 'routeMimeVDef.vDefName ),	SetupForm: func ( entry, entryView )		begin		local twoCRs := "\n\n";		//local qCR := "\"\n";		local s := twoCRs &			LocObj ( "EnRoute MIME Enclosure", 'routeMimeVDef.heading )			& "\n\n";		text := s;		end,	} );DefConst ( 'k_Std7BitASCIIChars,	" !\u0022\u#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\u005c\u]^_`abcdefghijklmnopqrstuvwxyz{|}~" );DefConst ( 'k_InfoPrefsProto,	{	GetTitle: func()		GetRoot().(appSymbol).title, 	RememberedClose: func(arg1)		:viewQuitScript(),	DoInfoAbout: func()		transport:?ShowAboutView(),	DoInfoHelp: func()		transport:?ShowHelpView(),	GenInfoAuxItems: func()		begin		// LRT - 96/12/19 6:48 PM		// there was a problem here with invalid package refs which		// I'm trying to solve by removing all direct references		// from the arrays in the transport		//transport.prefExtns;		// LRT - 97/03/31 12:37 PM		if k_BUILD_FLAG_ENABLE_GENERIC_PLUGS then			begin			local a := Clone(transport.prefExtns);			local generic := GetGlobalVar ( 'EnRouteCore ).generic;			if generic			and Length ( generic ) > 0 then				begin				local ix := 0;				while (ix := LSearch ( generic, true, ix, '|=|, 'genericPref ) ) do					begin					AddArraySlot ( a, generic[ix] );					ix := ix + 1;					end				end;			a;			end;		else	// END OF MODIFICATION - 97/03/31 12:37 PM			begin			Clone ( transport.prefExtns );			end;		end,	DoInfoAux: func ( items, index )		begin		/*******************************************************\			pref extension frames MUST have the form:			{			item:		"PickListString",			pickable:	true,			callFunc:	func ( prefsView ),	// possible bad pkg ref!			 - OR -			callFunc:	'someSlotSymbol,	// LRT - 96/12/19 6:56 PM			id:			kAppSymbol,			} );		\*******************************************************/		// LRT - 96/11/19 7:17 PM		// Fixed so that we will pass the actual prefs view to		// plugins when they are selected from [i]		try		local aux := items[index];		if IsFrame(aux) and aux.callFunc then			begin			if IsFunction(aux.callFunc) then				call aux.callFunc with ( :Parent() );	// WAS self pre-1.4B22			else if IsSymbol ( aux.callFunc ) then				begin				local rootFrame := GetRoot().(aux.id);				if rootFrame then					call rootFrame.(aux.callFunc) with ( :Parent() );				end;			end;		onexception |evt.ex| do nil;		end,	} );DefConst ( 'local_logChc_array, [		LocObj ( "File",   'stdPrefs.logChoiceFile ),		LocObj ( "Log",    'stdPrefs.logChoiceLog ),		LocObj ( "Delete", 'stdPrefs.logChoiceDel ), ] );DefConst ( 'local_fileCh_array, [		LocObj ( "copies",      'stdPrefs.fileAsCopies ),		LocObj ( "log entries", 'stdPrefs.fileAseLogs ),		NIL ] );DefConst ( 'local_routeCh_array, [		LocObj ( "Send now",     'stdPrefs.routeChoiceNow ),		LocObj ( "Send later",   'stdPrefs.routeChoiceLater ),		LocObj ( "Specify when", 'stdPrefs.routeChoiceWhen ), ] );DefConst ( 'local_fileText, LocObj ( "File ^0 in", 'stdPrefs.fileText ) );DefConst ( 'local_logAct_array, [ 'save, 'log, NIL ] );DefConst ( 'k_InBoxPrefsProto,	{	logText:		LocObj ( "File read mail in", 'stdPrefs.logTextInbox ),	logChoices:		local_logChc_array,	logConfig:		nil,	logActions:		local_logAct_array,	fileText:		local_fileText,	fileChoices:	local_fileCh_array,	fileConfig:		'inboxFiling,	testMethod:		'ReceiveRequest,	transport:		NIL,	sibling:		NIL,	} );DefConst ( 'k_OutBoxPrefsProto,	{	logText:		LocObj ( "After sending mail", 'stdPrefs.logTextOutbox ),	logChoices:		local_logChc_array, 	logConfig:		'outboxLogging,	logActions:		local_logAct_array,	fileText:		local_fileText,	fileChoices:	local_fileCh_array,	fileConfig:		'outboxFiling,	transport:		NIL,	testMethod:		'SendRequest,	sibling:		'siblingCheck,	} );DefConst ( 'k_MailRouteVerb, LocObj ( "Mail", 'stdPrefs.routeVerb ) );DefConst ( 'k_MailGroup, LocObj ( "Mail", 'misc.mailGroup ) );DefConst ( 'k_SendPrefsProto,	{	routeText:		LocObj ( "When mailing", 'stdPrefs.routeText ),	routeChoices:	local_routeCh_array,	routeVerb:		k_MailRouteVerb,	routeConfig:	'noworlater,	routeActions:	[ 'Now, 'Later, nil ],	transport:		nil,	testMethod:		'SendRequest,	} );DefConst ( 'k_DialogStatMsgsProto,	{	Idle:				"",	Initializing:		LocObj ( "Initializing Modem…", 'dialogStatusMsgs.Initializing ),	Dialing:			LocObj ( "Dialing…", 'dialogStatusMsgs.Dialing ),	Listening:			LocObj ( "Waiting for Caller…", 'dialogStatusMsgs.Listening ),	Connecting:			LocObj ( "Connecting to Server…", 'dialogStatusMsgs.Connecting ),	Login:				LocObj ( "Logging onto account…", 'dialogStatusMsgs.Login ),	Connected:			LocObj ( "Connected…", 'dialogStatusMsgs.Connected ),	Checking:			LocObj ( "Checking for Mail…", 'dialogStatusMsgs.Checking ),	Storing:			LocObj ( "Storing Messages…", 'dialogStatusMsgs.Storing ),	RemoteToBox:		LocObj ( "Moving to InBox…", 'dialogStatusMsgs.RemoteToBox ),	Preparing:			LocObj ( "Preparing…", 'dialogStatusMsgs.Preparing ),	Sending:			LocObj ( "Sending…", 'dialogStatusMsgs.Sending ),	More2Send:			LocObj ( "Checking for more…", 'dialogStatusMsgs.More2Send ),	Receiving:			LocObj ( "Receiving…", 'dialogStatusMsgs.Receiving ),	Reconstructing:		LocObj ( "Reconstructing…", 'dialogStatusMsgs.Reconstructing ),	Confirming:			LocObj ( "Confirming caller…", 'dialogStatusMsgs.Confirming ),	Disconnecting:		LocObj ( "Disconnecting…", 'dialogStatusMsgs.Disconnecting ),	LostServer:			LocObj ( "Server disconnected…", 'dialogStatusMsgs.LostServer ),	Cancelling:			LocObj ( "Cancelling…", 'dialogStatusMsgs.Cancelling ),	GotDisconnected:	LocObj ( "Network Disconnected", 'dialogStatusMsgs.GotDisconnected ),	} );DefConst ( 'k_InkConvertVerifyTxt,  LocObj ( "Please verify that the ink text was converted correctly.", 'inkConvert.inkVerifyText ) );DefConst ( 'k_UntitledString,       LocObj ( "untitled", 'misc.untitled ) );DefConst ( 'k_UnableProceedString,  LocObj ( "Unable to proceed.\n\n", 'errors.noProceed ) );DefConst ( 'k_UnableMakeConnString, LocObj ( "Unable to make a connection.", 'errors.unableMakeConn ) & "\n\n" );
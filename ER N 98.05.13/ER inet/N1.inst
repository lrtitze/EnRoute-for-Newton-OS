// LRT - 96/12/13 4:04 AM// Don't allow installation on older Newtonsif k_OS_2_1_ONLY_VERSION then SetPartFrameSlot ( 'DoNotInstall, func()	begin	if Gestalt(0x1000003).ROMVersion < 131074 then		begin		GetRoot():Notify ( kNotifyAlert, kAppName,			LocObj ( "Unable to install on this hardware.\n\nPlease contact Netstrategy Software for a version which will work with your Newton.",			'errors.newNewtOnly ) );		true;		end;	end );InstallScript := func ( partFrame, removeFrame )	begin	if not call kHasERCoreFunc with () then		begin	//	print ( "No Core found" );		local pkgRef := ObjectPkgRef ( partFrame.partData );		DefGlobalVar ( '|EnRoute:FreezerFunc:CallMe|, EnsureInternal(kInstallFreezerFunc) );		DefGlobalVar ( '|EnRoute:FreezerFunc:PkgRef|, pkgRef );		AddDeferredCall ( func()			begin			GetRoot():Notify ( kNotifyAlert, kAppName, ParamStr ( LocObj (				"The EnRoute Core is missing.\n\nDelete ^0 from the Extensions Drawer, install the EnRoute Core and try again.", 'errors.coreMissing ),				[ kAppName ] ) );			AddDelayedSend ( GetGlobals(), '|EnRoute:FreezerFunc:CallMe|, [], 250 );			end, [] );		removeFrame.skipRemove := true;		return nil;		end;	// ==================================	//	TRANSPORT	// ==================================	RegUnionSoup ( kAppSymbol, k_infoSoupDef );	RegTransport ( kInetMailSym, GetLayout ( "N1_Transport" ) );	local tg := GetUserConfig ( 'transportGroups );	tg.mail := kInetMailSym;	AddDeferredCall ( func(m) SetUserConfig('transportGroups, m), [tg] );	if kDebugOn then print("install done");	if kDebugOn then		begin		/********************************************************************\		local owner := ResolveEntryAlias ( userConfiguration.currentPersona );		if owner then owner := owner.name;		if owner then owner := owner.last;		owner := (owner and IsString(owner) and StrEqual(owner,"Titze") );		\********************************************************************/		if call k_OwnerIsTitzeFunc with () then			begin			local pkgRef := ObjectPkgRef ( partFrame.partData );			local pInfo := GetPkgRefInfo ( pkgRef );			write ( "size =" );			print ( pInfo.size );			end;		end;	end;RemoveScript := func(removeFrame)	begin	if removeFrame.skipRemove then		begin		return;		end;//	RemoveAppAlarms ( SPrintObject ( kAppSymbol ) );	UnregisterViewDef ( kInetMailinfoSym, 'worksite );	UnregTransport ( kInetMailSym );	UnRegUnionSoup ( k_infoSoupName, kAppSymbol );	local instA;	local gEnRoute := GetGlobalVar ( 'EnRouteCore );	if gEnRoute and ( instA := gEnRoute.installed ) then		begin		local inst;		while (inst := LSearch ( instA, kInetMailSym, 0, '|=|, 'id ) ) do			begin			ArrayRemoveCount ( instA, inst, 1 );			end;		end;	// detach any extensions belonging to this EnRoute transport	local extendA := gEnRoute.extended;	if extendA and Length ( extendA ) > 0 then		begin		local exItem;		foreach exItem in extendA do			if exItem.transportSym = kInetMailSym			and exItem.extension then				exItem.extension:?DetachExtension();		end;	// fix the "Mail" menu	local m := GetUserConfig ( 'transportGroups );	m.mail := nil;	SetUserConfig ( 'transportGroups, m );	if kDebugOn then print ( "remove done" );	end;/***************************************************************DeletionScript := func()	begin	end;***************************************************************/
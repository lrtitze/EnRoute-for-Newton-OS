if not IsGlobalConstant ( 'k_RevFamily ) then	begin	DefConst ( 'k_RevFamily, 141 );		// as opposed to 142	end;// LRT - 97/10/26 1:06 AMif not IsGlobalConstant ( 'k_USE_MAX_POP_LIST_LIMIT ) then	DefConst ( 'k_USE_MAX_POP_LIST_LIMIT, nil );if not IsGlobalConstant ( 'k_OS_2_1_ONLY_VERSION ) then	DefConst ( 'k_OS_2_1_ONLY_VERSION, true );if not IsGlobalConstant ( 'k_DEMO_VERSION ) then	DefConst ( 'k_DEMO_VERSION, nil );constant kVersion := if k_RevFamily = 141 then	"1.4.1" & ( if language = 'German then " D" else "" ) & ( if kDebugOn then " DBG" );else	"1.4.3b2a"	& (if k_DEMO_VERSION then "s" else "")	& (if k_OS_2_1_ONLY_VERSION then "" else "U")	& ( if language = 'German then " D" )	& ( if kDebugOn then " DBG" );print ( DateNTime(Time()) && "<---" && $' & kAppName & $' && "as '|" & kAppSymbol	& "| Version" && kVersion	& ( if kDebugOn then " DEBUG" )	& ( if k_DEMO_VERSION then " <DEMO>" else "" )	& ( if k_OS_2_1_ONLY_VERSION then " <2.1 ONLY>" else " <UNIVERSAL>" )	& ( if language = 'English then "" else (" " & language) ) );OpenResFile( Home & "resources"); 	DefConst ( 'k_FrameHeader, GetResource ( "FHDR", 128, 'binary ) );CloseResFile();DefConst ( 'k_CRLF, "\u000D000A" );DefConst ( 'k_MAX_INBOX_TEXT, 850500 );// LRT - 97/01/13 1:29 PMDefConst ( 'k_EmptyString, "" );// LRT - 97/02/06 12:30 PM// better for localizationDefConst ( 'k_SetStatusStrs,	{	lookingUpHost:	LocObj ( "Looking up host…",		'statusStrs.lookingUpHost ),	processingMsg:	LocObj ( "Processing message…",		'statusStrs.processingMsg ),	sendingOne:		LocObj ( "Sending ^0 of ^1",		'statusStrs.sendingOne ),	checkForMsgs:	LocObj ( "Checking for messages…",	'statusStrs.checkForMsgs ),	receivingMsgs:	LocObj ( "Receiving messages…",		'statusStrs.receivingMsgs ),	receivingOne:	LocObj ( "Receiving ^0 of ^1",		'statusStrs.receivingOne ),	checkingMsg:	LocObj ( "Checking ^0 of ^1",		'statusStrs.checkingMsg ),	skippingMsg:	LocObj ( "Skipping message ^0",		'statusStrs.skippingMsg ),	deletingMsg:	LocObj ( "Deleting  ^0 of ^1",		'statusStrs.deletingMsg ),	sendingMsgs:	LocObj ( "Sending messages…",		'statusStrs.sendingMsgs ),	whichMsgOf:		LocObj ( "Message ^0 of ^1",		'statusStrs.whichMsgOf ),	openingPOP:		LocObj ( "Opening POP server…",		'statusStrs.openingPOP ),	openingSMTP:	LocObj ( "Opening SMTP server…",	'statusStrs.openingSMTP ),	cleanup:		LocObj ( "Cleaning up…",			'statusStrs.cleanup ),	releasingNet:	LocObj ( "Releasing internet…",		'statusStrs.releasingNet ),	popLoginErr:	LocObj ( "POP Login error.",		'statusStrs.popLoginErr ),	} );DefConst ( 'k_sendstatusFrame,	{	idle:			LocObj ( "Disconnected", 'linkGrabStatus.idle ),	initializing:	LocObj ( "Initializing…", 'linkGrabStatus.initializing ),	connecting:		LocObj ( "Connecting…", 'linkGrabStatus.connecting ),	login:			LocObj ( "Logging on…", 'linkGrabStatus.login ),	connected:		LocObj ( "Connected", 'linkGrabStatus.connected ),	} );DefConst ( 'kn1_WaitPStr, LocObj ( "Waiting for \u0022\u^0\u0022\u", 'linkGrabTitles.waitingFor ) );DefConst ( 'kn1_SendPStr, LocObj ( "Sending: \u0022\u^0\u0022\u", 'linkGrabTitles.sending ) );DefConst ( 'k_sendtitlesFrame,	{	none:			k_EmptyString,	dialing:		LocObj ( "Dialing: ^0", 'linkGrabTitles.dialing ),	// LRT - 97/02/05 4:31 PM	// post-GM	// should add 'pause:	// LRT - 97/03/19 12:23 AM	// added "Pausing…"	pause:			LocObj ( "Pausing…", 'linkGrabTitles.pause ),	waitFor:		kn1_WaitPStr,	userName:		LocObj ( "Sending username", 'linkGrabTitles.userName ),	sendCR:			LocObj ( "Sending <CR>", 'linkGrabTitles.sendCR ),	password:		LocObj ( "Sending password", 'linkGrabTitles.password ),	send:			kn1_SendPStr,	scriptWaiting:	kn1_WaitPStr,	scriptSending:	kn1_SendPStr,	buildStack:		LocObj ( "Initializing ^0 connection", 'linkGrabTitles.buildStack ),	localAddress:	LocObj ( "Waiting for local address", 'linkGrabTitles.localAddress ),	remoteAddress:	LocObj ( "Waiting for remote address", 'linkGrabTitles.remoteAddress ),	} );// v_POP_stateconstant kState_popInit			:= 2;	// MUST BE lowestconstant kState_popAuthent		:= 9;	// LRT - 98/01/31 5:54 AMconstant kState_popLogin		:= 10;	// LRT - 98/01/31 5:54 AMconstant kState_popPassword		:= 11;constant kState_popLoggedIn		:= 12;constant kState_popGetStat		:= 14;constant kState_popGetList		:= 16;constant kState_popGetUnique	:= 19;constant kState_popGetHeader	:= 21;constant kState_popQuitting		:= 23;// v_SMTP_stateconstant kState_smtpInit		:= 1;	// MUST BE lowestconstant kState_smtpHello		:= 6;constant kState_smtpReset		:= 7;constant kState_smtpMailFrom	:= 8;constant kState_smtpAddressing	:= 9;constant kState_smtpData		:= 10;constant kState_smtpData_Hdr	:= 25;constant kState_smtpData_Txt	:= 26;constant kState_smtpData_TxtDn	:= 27;constant kState_smtpData_EncHdr	:= 29;constant kState_smtpData_EncDn	:= 30;constant kState_smtpData_BodyDn	:= 32;constant kState_smtpMsgBody		:= 33;constant kState_smtpBodyDone	:= 34;	// unusedDefConst ( 'k_smtpBodyTimeout, 90 * 1000 );	// 90 secs duringDefConst ( 'k_smtpDotCRTimeout, 60 * 1000 );	// 60 secs at endDefConst ( 'k_smtpBodyOutSpec,	{	async:	true,	// LRT - 97/06/04 9:25 PM	// let's see what help we can provide by giving	// a requested timeout value of about 10 seconds	reqTimeout:	k_smtpBodyTimeout,	completionscript: func ( ep, opts, result )		begin		if result = -16005 and ep.resends exists and ep.resends < 1 then			begin			//print ( "*** resend ***" );			gc(); //stats();			ep.resends := ep.resends + 1;			//printdepth := 0; printlength := 999;			//print(self);			local spec :=				{				async:	true,				// LRT - 98/03/12 3:53 AM				// WAS:				//reqTimeout:	10,				// NEW:				reqTimeout:	10000,		// real 10 seconds				};			spec.completionscript := self.completionscript;			AddDelayedSend ( ep, 'TxAsync, [ spec ], 10 );			return;			end;		AddDelayedSend ( ep, 'SM_SMTPBody, [ result ], 1 );		end;	} );